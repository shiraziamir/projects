global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon
        ulimit-n 65536 # new

defaults
	log	global
	option	tcplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000



# check 3 sentinel to see if they think redis1 is master
backend check_master_redis1
  mode tcp
  option tcp-check
  tcp-check connect
  tcp-check send PING\r\n
  tcp-check expect string +PONG
  tcp-check send SENTINEL\ master\ mymaster\r\n
  tcp-check expect string 172.16.68.18
  tcp-check send QUIT\r\n
  tcp-check expect string +OK

  server sentinel1 172.16.68.18:26379 check inter 2s
  server sentinel2 172.16.68.19:26379 check inter 2s
  server sentinel3 172.16.68.20:26379 check inter 2s

# check 3 sentinel to see if they think redis2 is master
backend check_master_redis2
  mode tcp
  option tcp-check
  tcp-check connect
  tcp-check send PING\r\n
  tcp-check expect string +PONG
  tcp-check send SENTINEL\ master\ mymaster\r\n
  tcp-check expect string 172.16.68.19
  tcp-check send QUIT\r\n
  tcp-check expect string +OK
  
  server sentinel1 172.16.68.18:26379 check inter 2s
  server sentinel2 172.16.68.19:26379 check inter 2s
  server sentinel3 172.16.68.20:26379 check inter 2s
  
# check 3 sentinel to see if they think redis3 is master
backend check_master_redis3
  mode tcp
  option tcp-check
  tcp-check connect
  tcp-check send PING\r\n
  tcp-check expect string +PONG
  tcp-check send SENTINEL\ master\ mymaster\r\n
  tcp-check expect string 172.16.68.20
  tcp-check send QUIT\r\n
  tcp-check expect string +OK
  
  server sentinel1 172.16.68.18:26379 check inter 2s
  server sentinel2 172.16.68.19:26379 check inter 2s
  server sentinel3 172.16.68.20:26379 check inter 2s
 

frontend http
	bind :8585

	default_backend stats

backend stats
	mode http
        stats enable
        stats uri /stats
	stats refresh 3s
	stats show-legends
	stats admin if TRUE
        stats realm authIsNeeded
        stats auth user:pass
 
# decide redis backend to use
frontend ft_redis
  bind *:6379
  mode tcp
  #acl network_allowed src 10.10.0.0/16
  #tcp-request connection reject if !network_allowed
  default_backend bk_redis
  
# Check all redis servers to see if they think they are master
backend bk_redis
  mode tcp
  option tcp-check
  tcp-check connect
  #tcp-check send AUTH\ MYPASSWORD\r\n
  #tcp-check expect string +OK
  tcp-check send PING\r\n
  tcp-check expect string +PONG
  tcp-check send info\ replication\r\n
  tcp-check expect string role:master
  tcp-check send QUIT\r\n
  tcp-check expect string +OK
  
  use-server redis1 if { srv_is_up(redis1) } { nbsrv(check_master_redis1) ge 2 }
  use-server redis2 if { srv_is_up(redis2) } { nbsrv(check_master_redis2) ge 2 }
  use-server redis3 if { srv_is_up(redis3) } { nbsrv(check_master_redis3) ge 2 }
  server redis1 172.16.68.18:6379 check inter 2s
  server redis2 172.16.68.19:6379 check inter 2s
  server redis3 172.16.68.20:6379 check inter 2s
